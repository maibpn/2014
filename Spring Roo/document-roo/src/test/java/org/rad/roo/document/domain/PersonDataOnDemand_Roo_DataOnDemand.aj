// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.rad.roo.document.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.rad.roo.document.domain.ElectronicAddress;
import org.rad.roo.document.domain.Gender;
import org.rad.roo.document.domain.Person;
import org.rad.roo.document.domain.PersonDataOnDemand;
import org.rad.roo.document.domain.PostalAddress;
import org.rad.roo.document.domain.TelephoneNumber;
import org.springframework.stereotype.Component;

privileged aspect PersonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonDataOnDemand: @Component;
    
    private Random PersonDataOnDemand.rnd = new SecureRandom();
    
    private List<Person> PersonDataOnDemand.data;
    
    public Person PersonDataOnDemand.getNewTransientPerson(int index) {
        Person obj = new Person();
        setElectronicAddress(obj, index);
        setFax(obj, index);
        setFirstName(obj, index);
        setGender(obj, index);
        setId(obj, index);
        setJobTitle(obj, index);
        setLandLinePhone(obj, index);
        setLastName(obj, index);
        setMName(obj, index);
        setMobilePhone(obj, index);
        setPersonalAddress(obj, index);
        setPrefix(obj, index);
        setSuffix(obj, index);
        return obj;
    }
    
    public void PersonDataOnDemand.setElectronicAddress(Person obj, int index) {
        ElectronicAddress electronicAddress = null;
        obj.setElectronicAddress(electronicAddress);
    }
    
    public void PersonDataOnDemand.setFax(Person obj, int index) {
        TelephoneNumber fax = null;
        obj.setFax(fax);
    }
    
    public void PersonDataOnDemand.setFirstName(Person obj, int index) {
        String firstName = "firstName_" + index;
        obj.setFirstName(firstName);
    }
    
    public void PersonDataOnDemand.setGender(Person obj, int index) {
        Gender gender = Gender.class.getEnumConstants()[0];
        obj.setGender(gender);
    }
    
    public void PersonDataOnDemand.setId(Person obj, int index) {
        String id = "id_" + index;
        obj.setId(id);
    }
    
    public void PersonDataOnDemand.setJobTitle(Person obj, int index) {
        String jobTitle = "jobTitle_" + index;
        obj.setJobTitle(jobTitle);
    }
    
    public void PersonDataOnDemand.setLandLinePhone(Person obj, int index) {
        TelephoneNumber landLinePhone = null;
        obj.setLandLinePhone(landLinePhone);
    }
    
    public void PersonDataOnDemand.setLastName(Person obj, int index) {
        String lastName = "lastName_" + index;
        obj.setLastName(lastName);
    }
    
    public void PersonDataOnDemand.setMName(Person obj, int index) {
        String mName = "mName_" + index;
        obj.setMName(mName);
    }
    
    public void PersonDataOnDemand.setMobilePhone(Person obj, int index) {
        TelephoneNumber mobilePhone = null;
        obj.setMobilePhone(mobilePhone);
    }
    
    public void PersonDataOnDemand.setPersonalAddress(Person obj, int index) {
        PostalAddress personalAddress = null;
        obj.setPersonalAddress(personalAddress);
    }
    
    public void PersonDataOnDemand.setPrefix(Person obj, int index) {
        String prefix = "prefix_" + index;
        obj.setPrefix(prefix);
    }
    
    public void PersonDataOnDemand.setSuffix(Person obj, int index) {
        String suffix = "suffix_" + index;
        obj.setSuffix(suffix);
    }
    
    public Person PersonDataOnDemand.getSpecificPerson(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Person obj = data.get(index);
        Long id = obj.getId_();
        return Person.findPerson(id);
    }
    
    public Person PersonDataOnDemand.getRandomPerson() {
        init();
        Person obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId_();
        return Person.findPerson(id);
    }
    
    public boolean PersonDataOnDemand.modifyPerson(Person obj) {
        return false;
    }
    
    public void PersonDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Person.findPersonEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Person' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Person>();
        for (int i = 0; i < 10; i++) {
            Person obj = getNewTransientPerson(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
